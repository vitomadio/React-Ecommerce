{
  "_args": [
    [
      {
        "raw": "mem-fs-editor@^4.0.0",
        "scope": null,
        "escapedName": "mem-fs-editor",
        "name": "mem-fs-editor",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/home/lolo/work/react-ecommerce/node_modules/yeoman-generator"
    ]
  ],
  "_from": "mem-fs-editor@>=4.0.0 <5.0.0",
  "_id": "mem-fs-editor@4.0.2",
  "_inCache": true,
  "_location": "/mem-fs-editor",
  "_nodeVersion": "9.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mem-fs-editor_4.0.2_1525628311622_0.3275012041517391"
  },
  "_npmUser": {
    "name": "sboudrias",
    "email": "admin@simonboudrias.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "clone-buffer": "1.0.0",
    "cloneable-readable": "1.1.2",
    "remove-trailing-separator": "1.1.0"
  },
  "_requested": {
    "raw": "mem-fs-editor@^4.0.0",
    "scope": null,
    "escapedName": "mem-fs-editor",
    "name": "mem-fs-editor",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/yeoman-generator"
  ],
  "_resolved": "https://registry.npmjs.org/mem-fs-editor/-/mem-fs-editor-4.0.2.tgz",
  "_shasum": "55a79b1e824da631254c4c95ba6366602c77af90",
  "_shrinkwrap": null,
  "_spec": "mem-fs-editor@^4.0.0",
  "_where": "/home/lolo/work/react-ecommerce/node_modules/yeoman-generator",
  "author": {
    "name": "Simon Boudrias"
  },
  "bugs": {
    "url": "https://github.com/SBoudrias/mem-fs-editor/issues"
  },
  "dependencies": {
    "commondir": "^1.0.1",
    "deep-extend": "^0.5.1",
    "ejs": "^2.5.9",
    "glob": "^7.0.3",
    "globby": "^8.0.0",
    "isbinaryfile": "^3.0.2",
    "mkdirp": "^0.5.0",
    "multimatch": "^2.0.0",
    "rimraf": "^2.2.8",
    "through2": "^2.0.0",
    "vinyl": "^2.0.1"
  },
  "description": "File edition helpers working on top of mem-fs",
  "devDependencies": {
    "coveralls": "^3.0.0",
    "escape-regexp": "0.0.1",
    "eslint": "^4.19.1",
    "eslint-config-xo-space": "^0.18.0",
    "jest": "^22.4.3",
    "mem-fs": "^1.0.0",
    "nsp": "^3.2.1",
    "sinon": "^5.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-QHvdXLLNmwJXxKdf7x27aNUren6IoPxwcM8Sfd+S6/ddQQMcYdEtVKsh6ilpqMrU18VQuKZEaH0aCGt3JDbA0g==",
    "shasum": "55a79b1e824da631254c4c95ba6366602c77af90",
    "tarball": "https://registry.npmjs.org/mem-fs-editor/-/mem-fs-editor-4.0.2.tgz",
    "fileCount": 16,
    "unpackedSize": 16362,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa7z2aCRA9TVsSAnZWagAAiOsQAIJVL/bsF6BuaLoj2Jif\nqi8PBwoyhbY8Kx6dmp3lBun6a6plrapOvfxdRIZs190Oanulf+LxmGU5Jm4n\ngKj2jcjjs6YG2IlXnjdVO7zUJe4GFumML8kHWBLzAxWrg7Thb9a6z3UjnXey\nHK/9ueGcbtwfEeLvoiqj3zOUVJ46lYIbgMVIvAU+DpUDjes8FT7R0kIcVe56\nBaenYksMgIkLy4XYukozH8ppa6e120t+4J1+BIG/reLehkOn39QxJV/RsuUj\nXNkZ6z3rKwPcACbIRWpXPELyXOsNV5fs04JjGj40o5hzXPxvQaBvKYA96EDU\nQUbC2doiKTWvLzoY+qhuK0JBVDJ7gRE9BVhdyV/ZKZFOuidyemisGhOwFROf\neWuSh3herHga2G9qUobBKss6+STYrNqTKi+hDViLz336MVQBYwEU/CrcZ95z\nwyjL6eL6LpHHL5Q1R5knqYwsyvI1ei0DCRZv8kwl2LzzN6cL68XtJiCRaKT0\nZ2SP5tLQwdonn6x5O698YMuBIuG9ZOm2NXLtYt/ZCKEkrERatHL7/lh6NtJg\nYUrKxU8IbbPBcSNfYHmDVqoqgEG8WnTm93QySNqlFTM+UJozgcgvMjE5k1JF\nujN+tnQ1HlCQ6TnS7m9jcC+WEs7nIqK+xE3IdwlGEAJMjJ4ZOrJb9AIJ8Yoh\n+j5F\r\n=M6sj\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib"
  ],
  "gitHead": "974e693bad39fe3388141c06ad485ba1cd74fea3",
  "homepage": "https://github.com/SBoudrias/mem-fs-editor#readme",
  "jest": {
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "testEnvironment": "node"
  },
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "sboudrias",
      "email": "admin@simonboudrias.com"
    }
  ],
  "name": "mem-fs-editor",
  "optionalDependencies": {},
  "readme": "mem-fs-editor [![Build Status](https://api.travis-ci.org/SBoudrias/mem-fs-editor.svg?branch=master)](https://travis-ci.org/SBoudrias/mem-fs-editor) [![NPM version](https://badge.fury.io/js/mem-fs-editor.svg)](http://badge.fury.io/js/mem-fs-editor) [![Coverage Status](https://coveralls.io/repos/github/SBoudrias/mem-fs-editor/badge.svg)](https://coveralls.io/github/SBoudrias/mem-fs-editor)\n=============\n\nFile edition helpers working on top of [mem-fs](https://github.com/SBoudrias/mem-fs)\n\nUsage\n-------------\n\n```js\nvar memFs = require('mem-fs');\nvar editor = require('mem-fs-editor');\n\nvar store = memFs.create();\nvar fs = editor.create(store);\n\nfs.write('somefile.js', 'var a = 1;');\n```\n\n### `#read(filepath, [options])`\n\nRead a file and return its contents as a string.\n\nYou can alternatively get the raw contents buffer if you pass `options.raw = true`.\n\nBy default, calling `read()` on a file path that does not exist throws error. You can, however, pass `options.defaults = 'your default content'` to get a default content you pass in, if you prefer to not deal with try/catch.\n\n### `#readJSON(filepath, [defaults])`\n\nRead a file and parse its contents as JSON.\n\n`readJSON()` internally calls `read()` but will not throw an error if the file path you pass in does not exist. If you pass in an optional `defaults`, the `defaults` content will be returned in case of the target file is missing, instead of `undefined`. (Error would still be thrown if `JSON.parse` failed to parse your target file.)\n\n### `#write(filepath, contents)`\n\nReplace the content of a file (existing or new) with a string or a buffer.\n\n### `#writeJSON(filepath, contents[, replacer [, space]])`\n\nReplace the content of a file (existing or new) with an object that is to be converted by calling `JSON.stringify()`.\n\n`contents` should usually be a JSON object, but it can technically be anything that is acceptable by [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n\nOptionally pass `replacer` and `space` as the last two arguments, as defined by [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify). `spacer` is used to format the output string (prettify).\n\nDefault value for `space` is `2`, when not specified.\n\n### `#append(filepath, contents, [options])`\n\nAppend the new contents to the current file contents.\n\n- `options.trimEnd` (default `true`). Trim trailing whitespace of the current file contents.\n- `options.separator` (default `os.EOL`). Separator to insert between current and new contents.\n\n### `#extendJSON(filepath, contents[, replacer [, space]])`\n\nExtend the content of an existing JSON file with the partial objects provided as argument.\n\nOptionally take the same JSON formatting arguments than `#writeJSON()`.\n\n### `#delete(filepath, [options])`\n\nDelete a file or a directory.\n\n`filePath` can also be a `glob`. If `filePath` is glob, you can optionally pass in an `options.globOptions` object to change its pattern matching behavior. The full list of options are being described [here](https://github.com/isaacs/node-glob#options). The `sync` flag is forced to be `true` in `globOptions`.\n\n### `#copy(from, to, [options])`\n\nCopy a file from the `from` path to the `to` path.\n\nOptionally, pass an `options.process` function (`process(contents)`) returning a string or a buffer who'll become the new file content. The process function will take a single contents argument who is the copied file contents as a `Buffer`.\n\n`from` can be a glob pattern that'll be match against the file system. If that's the case, then `to` must be an output directory. For a globified `from`, you can optionally pass in an `options.globOptions` object to change its pattern matching behavior. The full list of options are being described [here](https://github.com/isaacs/node-glob#options). The `nodir` flag is forced to be `true` in `globOptions` to ensure a vinyl object representing each matching directory is marked as `deleted` in the `mem-fs` store.\n\n### `#copyTpl(from, to, context[, templateOptions [, copyOptions]])`\n\nCopy the `from` file and, if it is not a binary file, parse its content as an [ejs](http://ejs.co/) template where `context` is the template context (the variable names available inside the template).\n\nYou can optionally pass a `templateOptions` object. `mem-fs-editor` automatically setup the filename option so you can easily use partials.\n\nYou can also optionally pass a `copyOptions` object (see [copy() documentation for more details](https://github.com/SBoudrias/mem-fs-editor#copyfrom-to-options)).\n\nTemplates syntax looks like this:\n\n```\n<%= value %>\n<%- include('partial.ejs', { name: 'Simon' }) %>\n```\n\nRefer to the [ejs documentation](http://ejs.co/) for more details.\n\n### `#move(from, to, [options])`\n\nMove/rename a file from the `from` path to the `to` path.\n\n`#move` internally uses `#copy` and `#delete`, so `from` can be a glob pattern, and you can provide `options.globOptions` with it.\n\n### `#exists(filepath)`\n\nReturns `true` if a file exists. Returns `false` if the file is not found or deleted.\n\n### `#commit([filters,] callback)`\n\nPersist every changes made to files in the mem-fs store to disk.\n\nIf provided, `filters` is an array of TransformStream to be applied on a stream of vinyl files (like gulp plugins).\n\n`callback` is called once the files are updated on disk.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SBoudrias/mem-fs-editor.git"
  },
  "scripts": {
    "prepublishOnly": "nsp check",
    "pretest": "eslint **/*.js",
    "test": "jest"
  },
  "version": "4.0.2"
}
